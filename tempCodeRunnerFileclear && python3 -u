import os
import re
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    Filters,
    CallbackContext,
    CallbackQueryHandler,
)
import requests
import tweepy
from bs4 import BeautifulSoup
import time

# Load environment variables
# Environment variables for Telegram, Twitter API setup will still be loaded from the .env file
# (You may want to avoid using Instagram API keys, relying on scraping as an alternative)
load_dotenv()
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
INSTAGRAM_ACCESS_TOKEN = os.getenv("INSTAGRAM_ACCESS_TOKEN")
TWITTER_API_KEY = os.getenv("TWITTER_API_KEY")
TWITTER_API_SECRET = os.getenv("TWITTER_API_SECRET")
TWITTER_ACCESS_TOKEN = os.getenv("TWITTER_ACCESS_TOKEN")
TWITTER_ACCESS_SECRET = os.getenv("TWITTER_ACCESS_SECRET")

# Categories for the bot
CATEGORIES = [
    ["Sports", "Music Artists"],
    ["Artists", "Content Creators"],
    ["Movies", "Books"],
    ["Technology", "Gaming"],
    ["Travel", "Food"],
    ["Fitness", "Fashion"],
    ["Education", "Science"],
    ["Business", "Comedy"],
]

# Set up logging
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# Twitter API Setup
auth = tweepy.OAuthHandler(TWITTER_API_KEY, TWITTER_API_SECRET)
auth.set_access_token(TWITTER_ACCESS_TOKEN, TWITTER_ACCESS_SECRET)
twitter_api = tweepy.API(auth)


# Helper function to extract emails
def extract_emails(text):
    return re.findall(r"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}", text)


# Telegram bot handlers
def start(update: Update, context: CallbackContext):
    """Start the bot and show the category options."""
    keyboard = [
        [InlineKeyboardButton(cat, callback_data=cat) for cat in row]
        for row in CATEGORIES
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        "Welcome! Choose a category to search for influencers:",
        reply_markup=reply_markup,
    )


def button(update: Update, context: CallbackContext):
    """Handle category button click and prompt user for query."""
    query = update.callback_query
    query.answer()
    query.edit_message_text(
        text=f"You selected: {query.data}\nNow send the name of a celebrity or topic."
    )


def search_influencers(update: Update, context: CallbackContext):
    """Search for influencer emails on Instagram and Twitter."""
    query = update.message.text
    chat_id = update.message.chat_id

    update.message.reply_text("Searching on Instagram and Twitter...")

    # Instagram Search (Simulated example, since Instagram API doesn't allow email scraping directly)
    insta_emails = search_instagram(query)

    # Twitter Search
    twitter_emails = search_twitter(query)

    # Combine results
    all_emails = set(insta_emails + twitter_emails)

    if all_emails:
        update.message.reply_text(
            f"Found the following emails:\n" + "\n".join(all_emails)
        )
    else:
        update.message.reply_text("No emails found. Try another query or category.")


def search_instagram(query):
    """Search Instagram for public profiles matching the query."""
    # Simulated scraping of Instagram profile info (bios) for emails
    url = (
        f"https://www.instagram.com/web/search/topsearch/?context=blended&query={query}"
    )
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
    }
    response = requests.get(url, headers=headers)

    if response.status_code == 200:
        data = response.json()
        emails = []
        for user in data.get("users", []):
            biography = user.get("user", {}).get("biography", "")
            emails.extend(extract_emails(biography))  # Extract emails from bio
        return emails
    return []


def search_twitter(query):
    """Search Twitter for public profiles matching the query."""
    emails = []
    try:
        # Use Tweepy to search for tweets related to the query
        for tweet in tweepy.Cursor(twitter_api.search_tweets, q=query, lang="en").items(
            10
        ):
            # Extract emails from the tweet text
            emails.extend(extract_emails(tweet.text))
    except Exception as e:
        logging.error(f"Twitter API error: {e}")
    return emails


def main():
    """Set up the bot and start listening for commands."""
    # Create the Updater and Dispatcher
    updater = Updater(TELEGRAM_TOKEN, use_context=True)
    dispatcher = updater.dispatcher

    # Handlers
    dispatcher.add_handler(CommandHandler("start", start))
    dispatcher.add_handler(CallbackQueryHandler(button))
    dispatcher.add_handler(
        MessageHandler(Filters.text & ~Filters.command, search_influencers)
    )

    # Start polling for updates
    updater.start_polling()
    updater.idle()


if __name__ == "__main__":
    main()
